never safety {    /* !((((([] (! (((lightState[0]==1)) && (((lightState[1]==1)) || (((lightState[2]==1)) || (((lightState[3]==1)) || ((lightState[4]==1)))))))) && ([] (! (((lightState[1]==1)) && (((lightState[0]==1)) || (((lightState[2]==1)) || ((lightState[3]==1)))))))) && ([] (! (((lightState[2]==1)) && (((lightState[0]==1)) || (((lightState[1]==1)) || ((lightState[4]==1)))))))) && ([] (! (((lightState[3]==1)) && (((lightState[0]==1)) || ((lightState[1]==1))))))) && ([] (! (((lightState[4]==1)) && (((lightState[0]==1)) || ((lightState[2]==1))))))) */
T0_init:
	do
	:: atomic { (((! ((! (((lightState[0]==1)) && (((lightState[1]==1)) || (((lightState[2]==1)) || (((lightState[3]==1)) || ((lightState[4]==1))))))))) || (((! ((! (((lightState[1]==1)) && (((lightState[0]==1)) || (((lightState[2]==1)) || ((lightState[3]==1)))))))) || (((! ((! (((lightState[2]==1)) && (((lightState[0]==1)) || (((lightState[1]==1)) || ((lightState[4]==1)))))))) || (((! ((! (((lightState[3]==1)) && (((lightState[0]==1)) || ((lightState[1]==1))))))) || (! ((! (((lightState[4]==1)) && (((lightState[0]==1)) || ((lightState[2]==1))))))))))))))) -> assert(!(((! ((! (((lightState[0]==1)) && (((lightState[1]==1)) || (((lightState[2]==1)) || (((lightState[3]==1)) || ((lightState[4]==1))))))))) || (((! ((! (((lightState[1]==1)) && (((lightState[0]==1)) || (((lightState[2]==1)) || ((lightState[3]==1)))))))) || (((! ((! (((lightState[2]==1)) && (((lightState[0]==1)) || (((lightState[1]==1)) || ((lightState[4]==1)))))))) || (((! ((! (((lightState[3]==1)) && (((lightState[0]==1)) || ((lightState[1]==1))))))) || (! ((! (((lightState[4]==1)) && (((lightState[0]==1)) || ((lightState[2]==1)))))))))))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never fairness {    /* !((((([] (<> (! (((lightState[0]==1)) && (hasTraffic[0]))))) && ([] (<> (! (((lightState[1]==1)) && (hasTraffic[1])))))) && ([] (<> (! (((lightState[2]==1)) && (hasTraffic[2])))))) && ([] (<> (! (((lightState[3]==1)) && (hasTraffic[3])))))) && ([] (<> (! (((lightState[4]==1)) && (hasTraffic[4])))))) */
T0_init:
	do
	:: (! ((! (((lightState[4]==1)) && (hasTraffic[4]))))) -> goto accept_S8
	:: (! ((! (((lightState[3]==1)) && (hasTraffic[3]))))) -> goto accept_S13
	:: (! ((! (((lightState[2]==1)) && (hasTraffic[2]))))) -> goto accept_S18
	:: (! ((! (((lightState[1]==1)) && (hasTraffic[1]))))) -> goto accept_S23
	:: (! ((! (((lightState[0]==1)) && (hasTraffic[0]))))) -> goto accept_S28
	:: (1) -> goto T0_init
	od;
accept_S8:
	do
	:: (! ((! (((lightState[4]==1)) && (hasTraffic[4]))))) -> goto accept_S8
	od;
accept_S13:
	do
	:: (! ((! (((lightState[3]==1)) && (hasTraffic[3]))))) -> goto accept_S13
	od;
accept_S18:
	do
	:: (! ((! (((lightState[2]==1)) && (hasTraffic[2]))))) -> goto accept_S18
	od;
accept_S23:
	do
	:: (! ((! (((lightState[1]==1)) && (hasTraffic[1]))))) -> goto accept_S23
	od;
accept_S28:
	do
	:: (! ((! (((lightState[0]==1)) && (hasTraffic[0]))))) -> goto accept_S28
	od;
}
